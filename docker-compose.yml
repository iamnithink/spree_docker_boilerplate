---
# Our PostgreSQL service:
postgres:
  image: postgres:9.4.4
  ports:
    - "5432:5432" # Bind host port 5432 to PostgreSQL port 5432
  volumes:
    - ./db/dumps:/app-db-dumps # We're mounting this folder so we can backup/restore database dumps from our app folder.
    - ./db/postgres-setup.sql:/docker-entrypoint-initdb.d/setup.sql
  environment:
    LC_ALL: C.UTF-8
    POSTGRES_PASSWORD: 3x1mpl3

# Our Redis service:
redis:
#  image: sickp/alpine-redis
  image: redis
  ports:
    - "6379:6379" # Bind host port 6379 to Redis port 6379

# Application: -----------------------------------------------------------------
# We'll also use this configuration (&app_base) for the worker and test
# containers:
web: &app_base
  build: .
  dockerfile: Dockerfile.dev
  ports:
    - "80:80" # Bind host port 80 to app HTTP port 80
  volumes:
    - .:/home/app/myapp/
  ##############################################################################
  # With linked containers, Docker writes entries to the container's /etc/hosts.
  # We'll try here naming the entries docker will insert into the
  # container's /etc/hosts, so we can use more familiar URL's for our app - See
  # this container's environment section below:
  links: &app_links
    - postgres:postgres.local
    - redis:redis.local
  environment: &app_environment
    # PostgreSQL Development Database:
    DATABASE_URL: postgres://postgres:3x1mpl3@postgres.local:5432/xmple_development?pool=25&encoding=unicode&schema_search_path=public

    # Redis Database:
    REDIS_URL: redis://redis.local:6379

    # Sidekiq configuration:
    SIDEKIQ_CONCURRENCY: 5
    SIDEKIQ_TIMEOUT: 10

    # Enable the byebug debugging server - this can be overriden
    # from the command line:
    ENABLE_DEBUG_SERVER: "false"

    # Run the app in the 'development' environment:
    RACK_ENV: development
    RAILS_ENV: development
  env_file: .env # Include the environment variables in the unversioned .env file

worker:
  <<: *app_base
  # Clean up ports from app_base
  ports: []
  command: sidekiq -c 25 -q default

# App Guard: Keeps running tests on a separate process:
#test:
#  <<: *app_base # We copy from &app_base, and override:
#  ports: []
#  command: bundle exec guard start --no-bundler-warning --no-interactions
#  environment:
#    <<: *app_environment
#    # PostgreSQL Test Database:
#    DATABASE_URL: postgres://postgres:3x1mpl3@postgres.local:5432/xmple_test?pool=25&encoding=unicode&schema_search_path=public
#
#    # Run the app in the 'test' environment, instead of the default 'developent'
#    RACK_ENV: test
#    RAILS_ENV: test
